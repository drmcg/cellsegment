#AUTOGENERATED! DO NOT EDIT! File to edit: dev/02_set_directories.ipynb (unless otherwise specified).

__all__ = ['Dirs']

#Cell
"""
Directories for Image preparation training and testing
"""
class Dirs:
    def __init__(obj, basepath):
        obj.basepath = basepath
        obj.originImages = basepath + '/Original'
        obj.train = basepath + '/Fullsize/Train'
        obj.validTxtFile =  basepath + '/Fullsize/valid.txt'
        obj.label =  basepath + '/Fullsize/Label'
        obj.test =  basepath + '/Fullsize/Test'
        obj.crop =  basepath + '/Crop-200'
        obj.sizeCsvFile =  basepath + '/file_size.csv'
        obj.cropValidTxtFile =  basepath + '/Crop-200/valid.txt'
        obj.cropTrain =  basepath + '/Crop-200/Train'
        obj.cropLabel =  basepath + '/Crop-200/Label'
        obj.cropTest =  basepath + '/Crop-200/Test'
        obj.model = basepath + '/models/'
    def __members(obj):
        return [attr for attr in dir(dirs) if not callable(getattr(dirs, attr)) and not attr.startswith("__")]
    @classmethod
    def all(cls):
        return [(name, value) for name, value in vars(cls).items() if not callable(name) and not name.startswith("__")]
    @classmethod
    def all2(cls):
        return [name for name, value in vars(cls).items()]

    def __repr__(obj):
        __vars = [attr for attr in dir(obj) if not callable(getattr(obj, attr)) and not attr.startswith("__")]
        print(__doc__)
        """Renders variables and their values on the terminal."""
        max_name_len = max([len(k) for k in __vars])
        max_val_len = max([len(str([k])) for k in __vars])
        ret = ''
        for k in __vars:
            ret += f'  {k:<{max_name_len}}:  {getattr(obj,  k):{max_val_len}} \n'
        return ret
    # def members(obj):
    #     return [attr for attr in dir(dirs) if not callable(getattr(dirs, attr)) and not attr.startswith("__")]
    #
    # def printdirs(d):
    #     ks = [k for k in d if (k[:2] != "__" and not callable(globals()[k]))]
    #     printVariables(ks)